<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.application.foodhub.comment.CommentDAO">

<select id="getCommentById" parameterType="Long" resultType="CommentDTO">
    SELECT * FROM COMMENTS WHERE COMMENT_ID = #{commentId}
</select>
    <!-- 특정 게시글의 모든 댓글 조회 (원댓글 + 대댓글 포함) -->
  	<select id="getCommentsByPostId" parameterType="Long" resultType="CommentDTO">
    SELECT 
        c.*, 
        u.PROFILE_UUID 
    FROM COMMENTS c
    JOIN USER u ON c.USER_ID = u.USER_ID
    WHERE c.POST_ID = #{postId}
      AND c.STATUS != 'DELETED'  <!-- ✅ 삭제된 댓글 제외 -->
    ORDER BY c.CREATED_AT ASC
</select>
    <!-- 특정 게시글의 원댓글(부모 댓글) 조회 -->
   <select id="getParentComments" parameterType="Long" resultType="CommentDTO">
    SELECT 
        c.*, 
        u.PROFILE_UUID 
    FROM COMMENTS c
    JOIN USER u ON c.USER_ID = u.USER_ID
    WHERE c.POST_ID = #{postId} 
      AND c.PARENT_ID IS NULL
      AND c.STATUS != 'DELETED'  <!-- ✅ 삭제된 댓글 제외 -->
    ORDER BY c.CREATED_AT ASC
</select>
    <!-- 특정 댓글의 대댓글 조회 -->
    <select id="getChildComments" parameterType="Long" resultType="CommentDTO">
    SELECT 
        c.*, 
        u.PROFILE_UUID 
    FROM COMMENTS c
    JOIN USER u ON c.USER_ID = u.USER_ID
    WHERE c.PARENT_ID = #{parentId}
      AND c.STATUS != 'DELETED'  <!-- ✅ 삭제된 대댓글 제외 -->
    ORDER BY c.CREATED_AT ASC
</select>
    <!-- 댓글 삽입 (원댓글 또는 대댓글) -->
    <insert id="insertComment">
    INSERT INTO COMMENTS 
                (POST_ID, USER_ID, PARENT_ID, CONTENT, CREATED_AT, UPDATED_AT, STATUS)
    VALUES      (#{postId}, #{userId}, 
                 CASE WHEN #{parentId} IS NULL THEN NULL ELSE #{parentId} END, 
                 #{content}, NOW(), NOW(), 'VISIBLE')
</insert>

<!-- 방금 등록한 최신 댓글 조회 -->
<select id="getLastInsertedComment" parameterType="map" resultType="CommentDTO">
    SELECT c.*, u.PROFILE_UUID
    FROM COMMENTS c
    JOIN USER u ON c.USER_ID = u.USER_ID
    WHERE c.POST_ID = #{postId} 
      AND c.USER_ID = #{userId}
    ORDER BY c.CREATED_AT DESC 
    LIMIT 1
</select>


    <!-- 댓글 수정 -->
    <update id="updateComment">
        UPDATE 	COMMENTS
        SET 	CONTENT = #{content}, UPDATED_AT = NOW()
        WHERE 	COMMENT_ID = #{commentId} AND STATUS = 'VISIBLE'
    </update>

    <!-- 댓글 삭제 (실제 삭제 X, 상태 변경) -->
 <update id="deleteComment">
    UPDATE COMMENTS
    SET STATUS = 'DELETED'
    WHERE COMMENT_ID = #{commentId}
</update>
</mapper>
